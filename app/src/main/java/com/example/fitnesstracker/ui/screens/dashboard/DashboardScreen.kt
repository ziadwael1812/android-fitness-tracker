package com.example.fitnesstracker.ui.screens.dashboard\n\nimport androidx.compose.foundation.clickable\nimport androidx.compose.foundation.layout.*\nimport androidx.compose.foundation.lazy.LazyColumn\nimport androidx.compose.foundation.lazy.items\nimport androidx.compose.material.icons.Icons\nimport androidx.compose.material.icons.filled.*\nimport androidx.compose.material3.*\nimport androidx.compose.runtime.Composable\nimport androidx.compose.runtime.collectAsState\nimport androidx.compose.runtime.getValue\nimport androidx.compose.ui.Alignment\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.graphics.vector.ImageVector\nimport androidx.compose.ui.text.font.FontWeight\nimport androidx.compose.ui.unit.dp\nimport androidx.compose.ui.unit.sp\nimport androidx.hilt.navigation.compose.hiltViewModel\nimport androidx.navigation.NavHostController\nimport com.example.fitnesstracker.data.local.entity.ActivityRecord\nimport com.example.fitnesstracker.ui.navigation.Screen\nimport com.example.fitnesstracker.util.formatDistance\nimport com.example.fitnesstracker.util.formatDuration\nimport com.example.fitnesstracker.util.toFormattedDateString\nimport com.example.fitnesstracker.util.toFormattedTimeString\nimport java.util.Locale\n\n@OptIn(ExperimentalMaterial3Api::class)\n@Composable\nfun DashboardScreen(\n    navController: NavHostController,\n    viewModel: DashboardViewModel = hiltViewModel()\n) {\n    val uiState by viewModel.uiState.collectAsState()\n\n    Scaffold(\n        topBar = {\n            TopAppBar(\n                title = { Text(\"Dashboard\") },\n                actions = {\n                    IconButton(onClick = { navController.navigate(Screen.Settings.route) }) {\n                        Icon(Icons.Filled.Settings, contentDescription = \"Settings\")\n                    }\n                }\n            )\n        },\n        floatingActionButton = {\n            FloatingActionButton(onClick = { navController.navigate(Screen.ActivityTracking.route) }) {\n                Icon(Icons.Filled.FitnessCenter, contentDescription = \"Start Activity\")\n            }\n        }\n    ) {\ paddingValues ->\n        if (uiState.isLoading) {\n            Box(modifier = Modifier.fillMaxSize().padding(paddingValues), contentAlignment = Alignment.Center) {\n                CircularProgressIndicator()\n            }\n        } else {\n            LazyColumn(\n                modifier = Modifier\n                    .fillMaxSize()\n                    .padding(paddingValues)\n                    .padding(horizontal = 16.dp),\n                verticalArrangement = Arrangement.spacedBy(16.dp)\n            ) {\n                item {\n                    WelcomeSection(name = uiState.userProfile?.name ?: \"User\")\n                }\n\n                item {\n                    TodaySummarySection(summary = uiState.todaySummary, goal = uiState.dailyGoal)\n                }\n\n                item {\n                    QuickActionsSection(navController = navController)\n                }\n\n                if (uiState.recentActivities.isNotEmpty()) {\n                    item {\n                        Text(\"Recent Activities\", style = MaterialTheme.typography.titleMedium)\n                    }\n                    items(uiState.recentActivities) { activity ->\n                        ActivityItem(activity = activity, onClick = {\n                            // navController.navigate(Screen.ActivityDetail.route + \"/${activity.id}\")\n                        })\n                    }\n                } else {\n                    item {\n                        Text(\n                            \"No recent activities. Start one to see it here!\",\n                            style = MaterialTheme.typography.bodyMedium,\n                            modifier = Modifier.padding(vertical = 16.dp)\n                        )\n                    }\n                }\n                item { Spacer(modifier = Modifier.height(64.dp)) } // Space for FAB\n            }\n        }\n    }\n}\n\n@Composable\nfun WelcomeSection(name: String) {\n    Text(\n        text = \"Welcome back, $name!\",\n        style = MaterialTheme.typography.headlineSmall,\n        modifier = Modifier.padding(vertical = 8.dp)\n    )\n}\n\n@Composable\nfun TodaySummarySection(summary: TodaySummary, goal: com.example.fitnesstracker.data.local.entity.DailyGoal?) {\n    Card(elevation = CardDefaults.cardElevation(defaultElevation = 2.dp)) {\n        Column(modifier = Modifier.padding(16.dp)) {\n            Text(\"Today\'s Summary\", style = MaterialTheme.typography.titleLarge, modifier = Modifier.padding(bottom = 12.dp))\n            Row(\n                modifier = Modifier.fillMaxWidth(),\n                horizontalArrangement = Arrangement.SpaceAround\n            ) {\n                SummaryStat(\n                    label = \"Steps\",\n                    value = \"${summary.totalSteps}\",\n                    goalValue = goal?.targetSteps?.toString(),\n                    progress = goal?.targetSteps?.let { if (it > 0) summary.totalSteps.toFloat() / it else 0f }\n                )\n                SummaryStat(\n                    label = \"Calories\",\n                    value = \"${summary.totalCaloriesBurned.toInt()} kcal\",\n                    goalValue = goal?.targetCalories?.toInt()?.toString(),\n                    progress = goal?.targetCalories?.let { if (it > 0) summary.totalCaloriesBurned.toFloat() / it.toFloat() else 0f }\n                )\n            }\n            Spacer(modifier = Modifier.height(16.dp))\n            Row(\n                modifier = Modifier.fillMaxWidth(),\n                horizontalArrangement = Arrangement.SpaceAround\n            ) {\n                SummaryStat(\n                    label = \"Distance\",\n                    value = summary.totalDistanceMeters.formatDistance(),\n                    goalValue = goal?.targetDistanceMeters?.formatDistance(),\n                     progress = goal?.targetDistanceMeters?.let { if (it > 0) summary.totalDistanceMeters.toFloat() / it.toFloat() else 0f }\n                )\n                SummaryStat(\n                    label = \"Active Time\",\n                    value = summary.totalActiveMinutes.formatDuration(),\n                    goalValue = goal?.targetActiveMinutes?.let { \"${it}m\" },\n                    progress = goal?.targetActiveMinutes?.let { if (it > 0) summary.totalActiveMinutes.toFloat() / it else 0f }\n\n                )\n            }\n        }\n    }\n}\n\n@Composable\nfun SummaryStat(label: String, value: String, unit: String? = null, goalValue: String? = null, progress: Float? = null) {\n    Column(horizontalAlignment = Alignment.CenterHorizontally) {\n        if (progress != null && goalValue != null) {\n            Box(contentAlignment = Alignment.Center) {\n                CircularProgressIndicator(\n                    progress = progress.coerceIn(0f, 1f),\n                    modifier = Modifier.size(60.dp),\n                    strokeWidth = 4.dp\n                )\n                Column(horizontalAlignment = Alignment.CenterHorizontally) {\n                    Text(text = value, style = MaterialTheme.typography.titleMedium, fontWeight = FontWeight.Bold)\n                    if (unit != null) {\n                        Text(text = unit, style = MaterialTheme.typography.bodySmall)\n                    }\n                }\n            }\n            Text(text = \"Goal: $goalValue\", style = MaterialTheme.typography.bodySmall, modifier = Modifier.padding(top = 4.dp))\n\n        } else {\n            Text(text = value, style = MaterialTheme.typography.headlineSmall, fontWeight = FontWeight.Bold)\n            if (unit != null) {\n                Text(text = unit, style = MaterialTheme.typography.bodyMedium)\n            }\n        }\n        Text(text = label, style = MaterialTheme.typography.labelMedium, modifier = Modifier.padding(top = 4.dp))\n    }\n}\n\n\n@Composable\nfun QuickActionsSection(navController: NavHostController) {\n    Column {\n        Text(\"Quick Actions\", style = MaterialTheme.typography.titleMedium, modifier = Modifier.padding(bottom = 8.dp))\n        Row(modifier = Modifier.fillMaxWidth(), horizontalArrangement = Arrangement.SpaceEvenly) {\n            QuickActionChip(label = \"Log Weight\", icon = Icons.Filled.MonitorWeight, onClick = { navController.navigate(Screen.WeightLog.route) })\n            QuickActionChip(label = \"Log Sleep\", icon = Icons.Filled.Hotel, onClick = { navController.navigate(Screen.SleepLog.route) })\n            QuickActionChip(label = \"Set Goals\", icon = Icons.Filled.Flag, onClick = { navController.navigate(Screen.Goals.route) })\n        }\n    }\n}\n\n@Composable\nfun QuickActionChip(label: String, icon: ImageVector, onClick: () -> Unit) {\n    AssistChip(\n        onClick = onClick,\n        label = { Text(label) },\n        leadingIcon = { Icon(icon, contentDescription = label) },\n        modifier = Modifier.padding(horizontal = 4.dp)\n    )\n}\n\n@Composable\nfun ActivityItem(activity: ActivityRecord, onClick: () -> Unit) {\n    Card(\n        modifier = Modifier\n            .fillMaxWidth()\n            .clickable(onClick = onClick),\n        elevation = CardDefaults.cardElevation(defaultElevation = 2.dp)\n    ) {\n        Row(modifier = Modifier.padding(12.dp), verticalAlignment = Alignment.CenterVertically) {\n            Icon(\n                imageVector = when(activity.type.toLowerCase(Locale.ROOT)) {\n                    \"running\" -> Icons.Filled.DirectionsRun\n                    \"walking\" -> Icons.Filled.DirectionsWalk\n                    \"cycling\" -> Icons.Filled.DirectionsBike\n                    else -> Icons.Filled.FitnessCenter\n                },\n                contentDescription = activity.type,\n                modifier = Modifier.size(40.dp).padding(end = 12.dp),\n                tint = MaterialTheme.colorScheme.primary\n            )\n            Column(modifier = Modifier.weight(1f)) {\n                Text(activity.type, style = MaterialTheme.typography.titleMedium)\n                Text(\n                    \"${activity.startTime.toFormattedDateString()} at ${activity.startTime.toFormattedTimeString()}\",\n                    style = MaterialTheme.typography.bodySmall\n                )\n            }\n            Column(horizontalAlignment = Alignment.End) {\n                activity.distanceMeters?.let {\n                    Text(it.formatDistance(), style = MaterialTheme.typography.bodyLarge, fontWeight = FontWeight.SemiBold)\n                }\n                Text(activity.durationMillis.formatDuration(), style = MaterialTheme.typography.bodyMedium)\n            }\n        }\n    }\n}\n\n